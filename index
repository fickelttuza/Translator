<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Kinyarwanda TTS Translator</title>
  <script src="https://cdn.jsdelivr.net/npm/@xenova/transformers@2.6.0"></script>
  <style>
    :root {
      --primary: #00A1DE;
      --surface: #FFFFFF;
      --text: #1C1C1E;
    }
    body {
      font-family: sans-serif;
      background: #f5f5f7;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
    }
    .container {
      background: var(--surface);
      border-radius: 16px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      width: 90%;
      max-width: 500px;
      padding: 25px;
      text-align: center;
    }
    h1 {
      color: var(--primary);
      margin-bottom: 30px;
    }
    textarea {
      width: 100%;
      height: 100px;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 8px;
      resize: vertical;
      font-size: 16px;
      margin-bottom: 15px;
    }
    button {
      background: var(--primary);
      color: white;
      border: none;
      padding: 12px 25px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 16px;
      transition: background 0.3s;
    }
    button:hover {
      background: #0087b9;
    }
    button:disabled {
      background: #cccccc;
      cursor: not-allowed;
    }
    .status {
      margin-top: 20px;
      color: #666;
      min-height: 25px;
    }
    .audio-container {
      margin-top: 25px;
      display: none;
    }
    .loader {
      display: none;
      width: 25px;
      height: 25px;
      border: 3px solid rgba(0,161,222,0.3);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s linear infinite;
      margin: 10px auto;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Kinyarwanda Text-to-Speech</h1>
    <textarea id="inputText" placeholder="Enter Kinyarwanda text (e.g.: Muraho, Amakuru?)"></textarea>
    <button id="speakBtn">Speak</button>
    
    <div class="loader" id="loader"></div>
    <div class="status" id="status"></div>
    
    <div class="audio-container" id="audioContainer">
      <audio id="audioPlayer" controls></audio>
    </div>
  </div>

  <script>
    // State management
    let ttsPipeline = null;
    let isInitialized = false;
    const modelName = "Xenova/speecht5_tts";
    const vocoderName = "Xenova/speecht5_hifigan";

    // DOM elements
    const inputText = document.getElementById('inputText');
    const speakBtn = document.getElementById('speakBtn');
    const statusEl = document.getElementById('status');
    const loaderEl = document.getElementById('loader');
    const audioContainer = document.getElementById('audioContainer');
    const audioPlayer = document.getElementById('audioPlayer');

    // Initialize TTS pipeline
    async function initializeTTS() {
      if (isInitialized) return true;
      
      try {
        statusEl.textContent = "Loading TTS model (first load may take 2-3 minutes)...";
        loaderEl.style.display = "block";
        speakBtn.disabled = true;
        
        // Load TTS model and vocoder
        const { pipeline } = await transformers;
        ttsPipeline = await pipeline(
          "text-to-speech",
          modelName,
          { quantized: false, progress_callback: updateProgress }
        );
        
        isInitialized = true;
        statusEl.textContent = "Model loaded! Enter Kinyarwanda text and click Speak";
        loaderEl.style.display = "none";
        speakBtn.disabled = false;
        return true;
      } catch (error) {
        console.error("Initialization failed:", error);
        statusEl.textContent = `Error: ${error.message}`;
        loaderEl.style.display = "none";
        return false;
      }
    }

    // Update loading progress
    function updateProgress(progress) {
      if (progress.status === "progress") {
        statusEl.textContent = `Downloading: ${Math.round(progress.loaded / progress.total * 100)}%`;
      }
    }

    // Convert text to speech
    async function textToSpeech() {
      if (!inputText.value.trim()) {
        statusEl.textContent = "Please enter Kinyarwanda text";
        return;
      }
      
      try {
        speakBtn.disabled = true;
        loaderEl.style.display = "block";
        statusEl.textContent = "Generating speech...";
        
        // Generate audio
        const output = await ttsPipeline(inputText.value, {
          speaker_embeddings: "https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/speaker_embeddings.bin",
          vocoder: vocoderName
        });
        
        // Create audio URL
        const audioBlob = new Blob([output.audio], { type: "audio/wav" });
        const audioUrl = URL.createObjectURL(audioBlob);
        
        // Play audio
        audioPlayer.src = audioUrl;
        audioContainer.style.display = "block";
        audioPlayer.play();
        
        statusEl.textContent = "Playing audio...";
        loaderEl.style.display = "none";
        speakBtn.disabled = false;
      } catch (error) {
        console.error("Synthesis error:", error);
        statusEl.textContent = `Error: ${error.message}`;
        loaderEl.style.display = "none";
        speakBtn.disabled = false;
        
        // Fallback to browser speech if available
        if (window.speechSynthesis) {
          statusEl.textContent += " - Using browser fallback";
          const utterance = new SpeechSynthesisUtterance(inputText.value);
          utterance.lang = "rw-RW";
          speechSynthesis.speak(utterance);
        }
      }
    }

    // Event listeners
    speakBtn.addEventListener("click", textToSpeech);
    
    // Initialize on load
    document.addEventListener("DOMContentLoaded", initializeTTS);
  </script>
</body>
</html>
